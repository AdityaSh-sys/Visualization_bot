import streamlit as st
from data_utils import read_uploaded_file, all_row_texts
from embedding_utils import embed_texts
from chromadb_utils import get_chroma_client, upsert_embeddings, query_similar
from llama_utils import query_llama_groq
from plot_utils import try_execute_code
from hybrid_prompt_utils import build_rag_prompt

st.set_page_config(page_title="Hybrid Data Chat", page_icon="ü¶ô", layout="wide")

# -- Sidebar Setup --
st.sidebar.header("üîñ Document Setup")
uploaded_file = st.sidebar.file_uploader("Upload CSV or Excel", type=["csv","xlsx","xls"])
if st.sidebar.button("Clear Session", use_container_width=True):
    st.session_state.clear()
    st.experimental_rerun()

# -- Session State Vars --
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'data_df' not in st.session_state:
    st.session_state.data_df = None
if 'chroma_collection_name' not in st.session_state:
    st.session_state.chroma_collection_name = None

# -- Sidebar File Card & Data Info --
if uploaded_file:
    df = read_uploaded_file(uploaded_file)
    if df is not None:
        chroma_collection_name = f"df_{hash(uploaded_file.name)}"
        st.session_state.data_df = df
        st.session_state.chroma_collection_name = chroma_collection_name
        chroma_col = get_chroma_client(collection_name=chroma_collection_name)
        st.sidebar.success(f"üìÑ {uploaded_file.name}")
        st.sidebar.caption(f"{round(uploaded_file.size/1024,1)} KB")
        row_docs = all_row_texts(df)
        row_embeds = embed_texts(row_docs)
        row_ids = [f"row_{i}" for i in range(len(row_docs))]
        row_metadatas = [{"row_num": i} for i in range(len(row_docs))]
        upsert_embeddings(chroma_col, row_ids, row_embeds, row_metadatas, row_docs)
        st.sidebar.markdown("**Preview:**")
        st.sidebar.dataframe(df.head(), use_container_width=True, height=200)
        st.sidebar.info(f"**Rows:** {df.shape[0]}  \n**Cols:** {df.shape[1]}")
        st.sidebar.success("Semantic search enabled! üöÄ")
else:
    st.sidebar.info("Upload a file to start.")

# -- MAIN PAGE CHAT UI --
st.markdown(
    """
    <h1 style='display:flex; align-items:center; gap:12px;'>ü¶ô Data Chatbot</h1>
    <p>Intelligent data analysis with visualization. <br>
    <span style='color:gray;font-size:14px;'>Ask questions or request charts in plain English.</span></p>
    """,
    unsafe_allow_html=True
)

if st.session_state.data_df is not None:
    st.divider()
    st.subheader("Chat about your data:")
    chat_area = st.container()
    icons = {
        "user": "üßë‚Äçüíª",
        "bot": "ü¶ô",
        "plot": "üñºÔ∏è",
        "code-debug": "üß©"
    }
    for msg in st.session_state.chat_history:
        if msg["role"] == "user":
            with chat_area:
                st.markdown(
                    f"<div style='background-color:#f8f9fa; padding:10px 15px; border-radius:10px;'>"
                    f"<b>{icons['user']} You:</b> {msg['content']}</div>", unsafe_allow_html=True)
        elif msg["role"] == "bot":
            if msg.get("type") == "text":
                with chat_area:
                    st.markdown(
                        f"<div style='background-color:#fffbe7; padding:10px 15px; border-radius:10px;'>"
                        f"<b>{icons['bot']} Bot:</b> {msg['content']}</div>", unsafe_allow_html=True)
            elif msg.get("type") == "plot":
                with chat_area:
                    st.markdown(
                        f"<div style='background-color:#eafbf7; padding:10px 15px; border-radius:10px;'>"
                        f"<b>{icons['plot']} Chart:</b></div>", unsafe_allow_html=True)
                    st.image(msg["img"], use_column_width=True)
            elif msg.get("type") == "code-debug":
                with chat_area:
                    with st.expander("üîß Code generated by Llama"):
                        st.code(msg["code"], language="python")

    st.divider()
    # -- Chat Form, like a bottom bar --
    viz_options = [
        "Let Llama pick", "Bar", "Line", "Pie", "Scatter"
    ]
    with st.form("chat_form", clear_on_submit=True):
        col1, col2 = st.columns([6,2])
        with col1:
            user_query = st.text_input("Ask a question or describe a chart...", placeholder="e.g. Trend of revenue by year")
        with col2:
            viz_type = st.selectbox("Chart Style", viz_options)
        submitted = st.form_submit_button("Send", use_container_width=True)

        if submitted and user_query:
            st.session_state.chat_history.append({"role":"user","content":user_query})
            df = st.session_state.data_df
            chroma_col = get_chroma_client(st.session_state.chroma_collection_name)
            query_embed = embed_texts([user_query])[0]
            sim_results = query_similar(chroma_col, query_embed, n_results=10)
            top_docs = sim_results["documents"][0]
            system, user = build_rag_prompt(df, top_docs, user_query, chart_type=viz_type)
            with st.spinner("Llama 3 is thinking..."):
                llama_answer = query_llama_groq(system, user)
            if "```" in llama_answer or "plt.show()" in llama_answer:
                code = llama_answer
                if code.lstrip().startswith("```"):
                    code = code.split("```")[1]
                    if code.lstrip().startswith("python"):
                        code = code[len("python"):].lstrip("\n")
                st.session_state.chat_history.append({"role":"bot","type":"code-debug","code":code.strip()})
                fig_data, err = try_execute_code(code.strip(), df)
                if fig_data:
                    st.session_state.chat_history.append({"role":"bot","type":"plot","img":fig_data})
                else:
                    st.session_state.chat_history.append({
                        "role": "bot", "type": "text",
                        "content": f"Sorry, chart code failed: {err}"})
            else:
                st.session_state.chat_history.append({"role":"bot","type":"text","content":llama_answer})
            st.rerun()
else:
    st.markdown(
        "<div style='margin-top:40px; color:gray; text-align:center;'>"
        "‚¨ÖÔ∏è Start by uploading a table in the sidebar.<br>"
        "Sample questions: <br> <i>Show profits by year, Compare two items, Trend of sales over time</i></div>",
        unsafe_allow_html=True
    )